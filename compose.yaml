services:
  php:
    container_name: php
    image: ${IMAGES_PREFIX:-}app-php
    restart: unless-stopped
    env_file:
      - .env
      - .env.local
    environment:
      SERVER_NAME: ${SERVER_NAME:-localhost}, php:80
      MERCURE_PUBLISHER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      MERCURE_SUBSCRIBER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      TRUSTED_PROXIES: ${TRUSTED_PROXIES:-127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16}
      TRUSTED_HOSTS: ^${SERVER_NAME:-example\.com|localhost}|php$$
      # Run "composer require symfony/mercure-bundle" to install and configure the Mercure integration
      MERCURE_URL: ${CADDY_MERCURE_URL:-http://php/.well-known/mercure}
      MERCURE_PUBLIC_URL: https://${SERVER_NAME:-localhost}/.well-known/mercure
      MERCURE_JWT_SECRET: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      # The two next lines can be removed after initial installation
      SYMFONY_VERSION: ${SYMFONY_VERSION:-}
      STABILITY: ${STABILITY:-stable}
    volumes:
      - caddy_data:/data
      - caddy_config:/config
    ports:
      # HTTP
      - target: 80
        published: ${HTTP_PORT:-80}
        protocol: tcp
      # HTTPS
      - target: 443
        published: ${HTTPS_PORT:-443}
        protocol: tcp
      # HTTP/3
      - target: 443
        published: ${HTTP3_PORT:-443}
        protocol: udp
    networks:
      - wam

  postgres:
    container_name: postgres
    image: postgres:${POSTGRES_VERSION}-alpine
    env_file:
      - .env
      - .env.local
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    healthcheck:
      test: ["CMD", "pg_isready"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
    ports:
      # <Port exposed> : <MySQL Port running inside container>
      - '54320:5432'
    networks:
      - wam

  mariadb:
    container_name: mariadb
    image: mariadb:${MARIADB_VERSION}
    env_file:
      - .env
      - .env.local
    restart: always
    environment:
      MYSQL_DATABASE: ${MARIADB_DB}
      # So you don't have to use root, but you can if you like
      MYSQL_USER: ${MARIADB_USER}
      # You can use whatever password you like
      MYSQL_PASSWORD: ${MARIADB_PASSWORD}
      # Password for root access
      MYSQL_ROOT_PASSWORD: ${MARIADB_PASSWORD}
    ports:
      # <Port exposed> : <MySQL Port running inside container>
      - '3306:3306'
    expose:
      # Opens port 3306 on the container
      - ${MARIADB_PORT}
      # Where our data will be persisted
    volumes:
      - mariadb_data:/var/lib/mysql
    networks:
      - wam

  zookeeper:
    container_name: zookeeper
    build:
      context: .docker/zookeeper
    ports:
      - '21811:2181'
    networks:
      - wam

  kafka:
    container_name: kafka
    build:
      context: .docker/kafka
    command:
      - --override
      - broker.id=1
      - --override
      - zookeeper.connect=zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - wam

  kafka-ui:
      container_name: kafka-ui
      image: provectuslabs/kafka-ui:latest
      ports:
        - 8888:8080
      environment:
        DYNAMIC_CONFIG_ENABLED: 'true'
      volumes:
        - ~/kui/config.yml:/etc/kafkaui/dynamic_config.yaml
      networks:
        - wam

volumes:
  caddy_data:
  caddy_config:
  postgres_data:
  mariadb_data:

networks:
  wam:
    name: wam
    driver: bridge